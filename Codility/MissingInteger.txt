Write a function:

class Solution { public int solution(int[] A); }

that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

Given A = [1, 2, 3], the function should return 4.

Given A = [−1, −3], the function should return 1.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].




/ you can also use imports, for example:
import java.util.*;
import java.util.Arrays;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A) {
        
        // if array is empty
        if (A.length == 0) {
            return 1;
        }
        
        // if array has 1 value
        if (A.length == 1) {
            // if value is not equal to 1
            if (A[0] != 1) {
                return 1;
            }
        }
        
        Arrays.sort(A);
        
        // If highest value is less than or equal to 0, return 1
        if (A[A.length-1] <= 0) {
            return 1;
        }
        
        // iterate through array A
        for (int i=0;i<A.length-1;i++) {
            
            // if current value is negative or 0, and next value is greater than 1
            if (A[i] <= 0 && A[i+1] > 1) {
                return 1;
            }
            
            // if first value is greater than 1
            if (i == 0 && A[i] > 1) {
                return 1;
            }
            
            // if value ahead of i is not equal to i, and the difference is greater than 1 
            if (A[i+1] != A[i] && A[i+1]-1 > A[i]) {
                
                // if minimum value is a positive integer
                if (A[i] + 1 > 0) {
                    // return the value of i + 1
                    return A[i] + 1;    
                }
                
            }
        }
        
        // return highest value + 1
        return A[A.length-1] + 1;
    }
}