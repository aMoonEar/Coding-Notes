A non-empty array A consisting of N integers is given.
A permutation is a sequence containing each element from 1 to N once, and only once.
For example, array A such that:
    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
is a permutation, but array A such that:
    A[0] = 4
    A[1] = 1
    A[2] = 3
is not a permutation, because value 2 is missing.
The goal is to check whether array A is a permutation.
Write a function:
class Solution { public int solution(int[] A); }
that, given an array A, returns 1 if array A is a permutation and 0 if it is not.
For example, given array A such that:
    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
the function should return 1.
Given array A such that:
    A[0] = 4
    A[1] = 1
    A[2] = 3
the function should return 0.
Write an efficient algorithm for the following assumptions:
	•	N is an integer within the range [1..100,000];
	•	each element of array A is an integer within the range [1..1,000,000,000].




// you can also use imports, for example:
import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A) {
        if (A.length == 0) {
            return 1;
        }
        
        // sort array
        Arrays.sort(A);
        int min = 1;
        for (int i = 0; i <A.length; i++) {
            
            // if value at i is negative
            if (A[i] <= 0) {
                return 0;
            }
            
            // if value is equal to minimum
            if (A[i] == min) {
                // increase minimum
                min = min + 1;
            } else {
                // minimum + 1 was not found
                return 0;
            }
            
        }
        return 1;
    }
}